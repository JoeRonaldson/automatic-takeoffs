{"version":3,"sources":["components/ImageCropper/demoImage.jpg","components/ImageCropper/index.js","components/Results/results.js","App.js","reportWebVitals.js","index.js"],"names":["ImageCropper","props","imageToCrop","onImageCropped","useState","unit","x","y","width","height","cropConfig","setCropConfig","imageRef","setImageRef","crop","a","getCroppedImage","croppedImage","sourceImage","fileName","image","scaleX","naturalWidth","scaleY","naturalHeight","canvas","document","createElement","getContext","drawImage","Promise","resolve","reject","toBlob","blob","name","croppedImageUrl","window","URL","createObjectURL","Error","src","demoImage","ruleOfThirds","onImageLoaded","onComplete","cropImage","onChange","crossorigin","defaultProps","Results","className","serverResponse","map","val","key","alt","templateImg","takeoffCount","status","App","undefined","setImageToCrop","setCroppedImage","b64toBlob","b64","onsuccess","onerror","img","Image","onload","type","accept","event","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onClick","parseURI","d","res","rej","e","getDataBlobURL","url","fetch","uri","croppedImageBlob","then","imageToCropBlob","postToServer","croppedImageBase64","imageToCropBase64","data","templateImage","options","method","headers","body","JSON","stringify","json","results","resultImage","error","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6b7be140.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/demoImage.f2ef97aa.jpg\";","import React, { useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport demoImage from './demoImage.jpg';\n\nfunction ImageCropper(props) {\n  const { imageToCrop, onImageCropped } = props;\n\n  const [cropConfig, setCropConfig] = useState(\n    // default crop config\n    {\n      unit: 'px', // default, can be 'px' or '%'\n      x: 300,\n      y: 50,\n      width: 200,\n      height: 200,\n    }\n  );\n\n  const [imageRef, setImageRef] = useState();\n\n  async function cropImage(crop) {\n    if (imageRef && crop.width && crop.height) {\n      const croppedImage = await getCroppedImage(\n        imageRef,\n        crop,\n        'croppedImage.jpeg' // destination filename\n      );\n\n      // calling the props function to expose\n      // croppedImage to the parent component\n      onImageCropped(croppedImage);\n    }\n  }\n  // Potential fix to the resizing issue https://github.com/DominicTobias/react-image-crop/issues/263\n  // This fix has been made from https://stackoverflow.com/questions/62585425/how-can-i-crop-an-image-on-the-client-side-without-losing-resolution-using-react\n  function getCroppedImage(sourceImage, cropConfig, fileName) {\n    // creating the cropped image from the source image\n    const image = sourceImage;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const canvas = document.createElement('canvas');\n\n    canvas.width = cropConfig.width * scaleX;\n    canvas.height = cropConfig.height * scaleY;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      sourceImage,\n      cropConfig.x * scaleX,\n      cropConfig.y * scaleY,\n      cropConfig.width * scaleX,\n      cropConfig.height * scaleY,\n      0,\n      0,\n      cropConfig.width * scaleX,\n      cropConfig.height * scaleY\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob((blob) => {\n        // returning an error\n        if (!blob) {\n          reject(new Error('Canvas is empty'));\n          return;\n        }\n\n        blob.name = fileName;\n        // creating a Object URL representing the Blob object given\n        const croppedImageUrl = window.URL.createObjectURL(blob);\n        resolve(croppedImageUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n  return (\n    <ReactCrop\n      src={imageToCrop || demoImage}\n      crop={cropConfig}\n      ruleOfThirds\n      onImageLoaded={(imageRef) => setImageRef(imageRef)}\n      onComplete={(cropConfig) => cropImage(cropConfig)}\n      onChange={(cropConfig) => setCropConfig(cropConfig)}\n      crossorigin=\"anonymous\" // to avoid CORS-related problems\n    />\n  );\n}\n\nImageCropper.defaultProps = {\n  onImageCropped: () => {},\n};\n\nexport default ImageCropper;\n","import './results.css';\n\nfunction Results(props) {\n  //const serverResponse = props; // this is useless\n  //console.log(props.serverResponse);\n  //console.log('Function Called');\n\n  return (\n    <div className=\"table\">\n      <table>\n        <tr>\n          <th>Item</th>\n          <th>Count</th>\n          <th>Status</th>\n        </tr>\n        {props.serverResponse.map((val, key) => {\n          return (\n            <tr key={key}>\n              <td>\n                <img alt=\"template\" src={val.templateImg} max-height={75} max-width={150}></img>\n              </td>\n              <td>{val.takeoffCount}</td>\n              <td>{val.status}</td>\n            </tr>\n          );\n        })}\n      </table>\n    </div>\n  );\n}\nexport default Results;\n","import React, { useState } from 'react';\nimport './App.css';\nimport ImageCropper from './components/ImageCropper';\nimport Results from './components/Results/results.js';\nimport demoImage from './components//ImageCropper/demoImage.jpg';\n\nconst serverResponse = [];\n\nfunction App() {\n  // Declares a new state variable: imageToCrop, and new setting function: setImageToCrop\n  const [imageToCrop, setImageToCrop] = useState(undefined); // useState() returns a variable and a setter func\n  const [croppedImage, setCroppedImage] = useState(undefined);\n\n  // only called when uploading a file\n  const onUploadFile = (event) => {\n    if (event.target.files && event.target.files.length > 0) {\n      const reader = new FileReader();\n\n      reader.addEventListener('load', () => {\n        const image = reader.result;\n\n        setImageToCrop(image);\n      });\n\n      reader.readAsDataURL(event.target.files[0]); // this is the uploaded file parsed with FileReader\n      // console.log(event.target.files[0]); // interesting format for the file.\n    }\n  };\n\n  // converts Base64 to Blob URL\n  function b64toBlob(b64, onsuccess, onerror) {\n    let img = new Image();\n    img.onerror = onerror;\n    img.onload = function onload() {\n      let canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n\n      let ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      canvas.toBlob(onsuccess);\n    };\n    img.src = b64;\n  }\n\n  // button to start the backend process\n  // send a api call to the template matching service run with node/express and receive an object with image and count.\n  function CountBtn() {\n    //console.log(`Cropped Image URL: ${croppedImage}, Image to Crop URL: ${imageToCrop}`);\n\n    // the next two functions are used to convert blobURLs to Base64\n    async function parseURI(d) {\n      var reader = new FileReader();\n      reader.readAsDataURL(d);\n      return new Promise((res, rej) => {\n        reader.onload = (e) => {\n          res(e.target.result);\n        };\n      });\n    }\n    async function getDataBlobURL(url) {\n      var res = await fetch(url);\n      var blob = await res.blob();\n      var uri = await parseURI(blob);\n      //console.log(uri);\n      return uri;\n    }\n\n    // runs the function to convert Blob URL to Base64\n    const croppedImageBlob = getDataBlobURL(croppedImage).then((result) => {\n      return result;\n    });\n    const imageToCropBlob = getDataBlobURL(imageToCrop || demoImage).then((result) => {\n      return result;\n    });\n\n    // function to get Base64 from promise object and post to server\n    const postToServer = async () => {\n      const croppedImageBase64 = await croppedImageBlob;\n      const imageToCropBase64 = await imageToCropBlob;\n      const data = {\n        status: 'In-progress',\n        templateImage: croppedImageBase64,\n        image: imageToCropBase64,\n        takeoffCount: null,\n      };\n\n      // ------api post request to server------ //\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      };\n\n      fetch('/api/send', options)\n        .then((res) => res.json())\n        .then(\n          (results) => (\n            b64toBlob(\n              results.resultImage,\n              function (blob) {\n                let url = window.URL.createObjectURL(blob);\n                //setResultImage(url);\n                setImageToCrop(url); // Include this line to update ImageToCrop with the template matched image (Result Image)\n              },\n              function (error) {}\n            ),\n            //setServerResponse(results),\n            serverResponse.push(results)\n            //console.log('Response Object:', serverResponse)\n          )\n        );\n    };\n\n    postToServer();\n  }\n\n  return (\n    <div className=\"app\">\n      <label className=\"drawing-upload\">\n        <input type=\"file\" accept=\"image/*\" onChange={onUploadFile} />\n        Upload Drawing\n      </label>\n      <div>\n        <ImageCropper\n          imageToCrop={imageToCrop}\n          onImageCropped={(croppedImage) => setCroppedImage(croppedImage)}\n        />\n      </div>\n      {croppedImage && (\n        <div className=\"croppedImg\">\n          <img alt=\"Cropped Img\" src={croppedImage} />\n        </div>\n      )}\n      <div className=\"app input\">\n        <button className=\"button\" onClick={CountBtn}>\n          Count Items\n        </button>\n        <Results serverResponse={serverResponse} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}