{"version":3,"sources":["components/ImageCropper/demoImage.jpg","components/ImageCropper/index.js","components/Count/count.js","components/Results/results.js","App.js","reportWebVitals.js","index.js"],"names":["ImageCropper","props","imageToCrop","onImageCropped","useState","unit","x","y","width","height","cropConfig","setCropConfig","imageRef","setImageRef","crop","a","getCroppedImage","croppedImage","sourceImage","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","Promise","resolve","reject","toBlob","blob","name","croppedImageUrl","window","URL","createObjectURL","Error","src","demoImage","ruleOfThirds","onImageLoaded","onComplete","cropImage","onChange","crossorigin","defaultProps","Component","Results","console","log","serverResponse","status","takeoffCount","App","undefined","setImageToCrop","setCroppedImage","resultImage","setResultImage","setServerResponse","b64toBlob","b64","onsuccess","onerror","img","Image","onload","className","type","accept","event","target","files","length","reader","FileReader","addEventListener","image","result","readAsDataURL","alt","onClick","parseURI","d","res","rej","e","getDataBlobURL","url","fetch","uri","croppedImageBlob","then","imageToCropBlob","postToServer","croppedImageBase64","imageToCropBase64","data","templateImage","options","method","headers","body","JSON","stringify","json","results","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d8c1c495.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/demoImage.d8fb7814.jpg\";","import React, { useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport demoImage from './demoImage.jpg';\n\nfunction ImageCropper(props) {\n  const { imageToCrop, onImageCropped } = props;\n\n  const [cropConfig, setCropConfig] = useState(\n    // default crop config\n    {\n      unit: 'px', // default, can be 'px' or '%'\n      x: 300,\n      y: 50,\n      width: 200,\n      height: 200,\n    }\n  );\n\n  const [imageRef, setImageRef] = useState();\n\n  async function cropImage(crop) {\n    if (imageRef && crop.width && crop.height) {\n      const croppedImage = await getCroppedImage(\n        imageRef,\n        crop,\n        'croppedImage.jpeg' // destination filename\n      );\n\n      // calling the props function to expose\n      // croppedImage to the parent component\n      onImageCropped(croppedImage);\n    }\n  }\n\n  function getCroppedImage(sourceImage, cropConfig, fileName) {\n    // creating the cropped image from the source image\n    const canvas = document.createElement('canvas');\n    const scaleX = sourceImage.naturalWidth / sourceImage.width;\n    const scaleY = sourceImage.naturalHeight / sourceImage.height;\n    canvas.width = cropConfig.width;\n    canvas.height = cropConfig.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      sourceImage,\n      cropConfig.x * scaleX,\n      cropConfig.y * scaleY,\n      cropConfig.width * scaleX,\n      cropConfig.height * scaleY,\n      0,\n      0,\n      cropConfig.width,\n      cropConfig.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob((blob) => {\n        // returning an error\n        if (!blob) {\n          reject(new Error('Canvas is empty'));\n          return;\n        }\n\n        blob.name = fileName;\n        // creating a Object URL representing the Blob object given\n        const croppedImageUrl = window.URL.createObjectURL(blob);\n        resolve(croppedImageUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n  return (\n    <ReactCrop\n      src={imageToCrop || demoImage}\n      crop={cropConfig}\n      ruleOfThirds\n      onImageLoaded={(imageRef) => setImageRef(imageRef)}\n      onComplete={(cropConfig) => cropImage(cropConfig)}\n      onChange={(cropConfig) => setCropConfig(cropConfig)}\n      crossorigin=\"anonymous\" // to avoid CORS-related problems\n    />\n  );\n}\n\nImageCropper.defaultProps = {\n  onImageCropped: () => {},\n};\n\nexport default ImageCropper;\n","import React, { Component } from 'react';\nimport './count.css';\n\nclass Count extends Component {\n  constructor() {\n    super();\n    this.state = {\n      results: [],\n    };\n  }\n  // sets the results object state by calling the api\n  componentDidMount() {\n    fetch('/api/templatematching')\n      .then((res) => res.json())\n      .then((results) =>\n        this.setState({ results }, () => console.log('Template Matching Complete...', results))\n      );\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Results</h2>\n        <ul>\n          {this.state.results.map((results) => (\n            <li key={results.image}>\n              {results.templateImage} {results.takeoffCount}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Count;\n","function Results(props) {\n  const serverResponse = props;\n  console.log(props.serverResponse);\n\n  return (\n    <div>\n      <h2>Results</h2>\n      <ul>\n        <li>\n          <p>Takeoff Status: {props.serverResponse.status} </p>\n          <p>The total number of matches is: {props.serverResponse.takeoffCount}</p>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Results;\n","import React, { useState } from 'react';\nimport './App.css';\nimport ImageCropper from './components/ImageCropper';\nimport Count from './components/Count/count.js';\nimport Results from './components/Results/results.js';\nimport demoImage from './components//ImageCropper/demoImage.jpg';\n\nfunction App() {\n  // Declares a new state variable: imageToCrop, and new setting function: setImageToCrop\n  const [imageToCrop, setImageToCrop] = useState(undefined); // useState() returns a variable and a setter func\n  const [croppedImage, setCroppedImage] = useState(undefined);\n  const [resultImage, setResultImage] = useState(undefined);\n  const [serverResponse, setServerResponse] = useState({\n    status: 'Ready to count',\n    resultImage: null,\n    takeoffCount: '',\n  });\n\n  // only called when uploading a file\n  const onUploadFile = (event) => {\n    if (event.target.files && event.target.files.length > 0) {\n      const reader = new FileReader();\n\n      reader.addEventListener('load', () => {\n        const image = reader.result;\n\n        setImageToCrop(image);\n      });\n\n      reader.readAsDataURL(event.target.files[0]); // this is the uploaded file parsed with FileReader\n      // console.log(event.target.files[0]); // interesting format for the file.\n    }\n  };\n\n  // converts Base64 to Blob URL\n  function b64toBlob(b64, onsuccess, onerror) {\n    let img = new Image();\n    img.onerror = onerror;\n    img.onload = function onload() {\n      let canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n\n      let ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      canvas.toBlob(onsuccess);\n    };\n    img.src = b64;\n  }\n\n  // button to start the backend process\n  // send a api call to the template matching service run with node/express and receive an object with image and count.\n  function CountBtn() {\n    //console.log(`Cropped Image URL: ${croppedImage}, Image to Crop URL: ${imageToCrop}`);\n\n    // the next two functions are used to convert blobURLs to Base64\n    async function parseURI(d) {\n      var reader = new FileReader();\n      reader.readAsDataURL(d);\n      return new Promise((res, rej) => {\n        reader.onload = (e) => {\n          res(e.target.result);\n        };\n      });\n    }\n    async function getDataBlobURL(url) {\n      var res = await fetch(url);\n      var blob = await res.blob();\n      var uri = await parseURI(blob);\n      //console.log(uri);\n      return uri;\n    }\n\n    // runs the function to convert Blob URL to Base64\n    const croppedImageBlob = getDataBlobURL(croppedImage).then((result) => {\n      return result;\n    });\n    const imageToCropBlob = getDataBlobURL(imageToCrop || demoImage).then((result) => {\n      return result;\n    });\n\n    // function to get Base64 from promise object and post to server\n    const postToServer = async () => {\n      const croppedImageBase64 = await croppedImageBlob;\n      const imageToCropBase64 = await imageToCropBlob;\n      const data = {\n        status: 'In-progress',\n        templateImage: croppedImageBase64,\n        image: imageToCropBase64,\n        takeoffCount: null,\n      };\n\n      // ------api post request to server------ //\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      };\n      fetch('/api/send', options)\n        .then((res) => res.json())\n        .then(\n          (results) => (\n            setServerResponse(results),\n            b64toBlob(\n              results.resultImage,\n              function (blob) {\n                let url = window.URL.createObjectURL(blob);\n                setResultImage(url);\n              },\n              function (error) {}\n            ),\n            console.log('Response Object:', serverResponse)\n            //console.log(resultImage)\n          )\n        );\n    };\n    postToServer();\n  }\n\n  return (\n    <div className=\"app\">\n      <input type=\"file\" accept=\"image/*\" onChange={onUploadFile} />\n      <div>\n        <ImageCropper\n          imageToCrop={imageToCrop}\n          onImageCropped={(croppedImage) => setCroppedImage(croppedImage)}\n        />\n      </div>\n      {croppedImage && (\n        <div>\n          <h2>Cropped Image</h2>\n          <img alt=\"Cropped Img\" src={croppedImage} />\n        </div>\n      )}\n      <div className=\"app input\">\n        <button onClick={CountBtn}>Count Items</button>\n        <Results serverResponse={serverResponse} />\n      </div>\n      <div>\n        <img alt=\"Result Img\" src={resultImage} className=\"img-fluid\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}